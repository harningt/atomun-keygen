buildscript {
    ext.kotlin_version = "1.4.0"
    dependencies {
        classpath "net.sf.proguard:proguard-gradle:6.0.3"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'maven'
    id 'us.eharning.gradle.defaults' version '2.1.2'
}

apply plugin: 'kotlin'

group = 'us.eharning.atomun'
description = 'Utility library implementing key generation.'
sourceCompatibility = 1.8

repositories {
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    compile 'us.eharning.atomun:atomun-core:0.0.2'

    /* NOTE: Using the android version due to intended use, consider replacable w/ 25.0 */
    compile group: 'com.google.guava', name: 'guava', version: '29.0-android'

    compile 'net.jcip:jcip-annotations:1.0'
    compile 'com.github.spotbugs:spotbugs-annotations:4.0.0-beta4'
    compile 'com.google.code.findbugs:jsr305:3.0.2'

    compile 'org.bouncycastle:bcprov-jdk15on:1.65.01'

    testCompile 'org.codehaus.groovy:groovy:3.0.4'
    testCompile 'org.spockframework:spock-core:2.0-groovy-3.0-SNAPSHOT'
    testCompile 'net.trajano.caliper:caliper:1.2.1'
    testCompile 'org.yaml:snakeyaml:1.26'
}

javadoc {
    options.tags "todo:a:TODO:"
}

apply from: "$rootDir/gradle/maven-publish.gradle"

test {
    /* If in JDK 9 or higher, must mark illegal-access as denied */
    if (JavaVersion.current() > JavaVersion.VERSION_1_8) {
        jvmArgs('--illegal-access=deny')
    }

    useJUnitPlatform()

    afterSuite { desc, result ->
        if (!desc.parent) {
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}

wrapper {
    gradleVersion = '5.4.1'
}

/* Sanity check that the minimum class-set is from Java 7 */
task proguardCheck(type: proguard.gradle.ProGuardTask, dependsOn: assemble) {
    injars project.jar.archivePath
    libraryjars files(System.getenv("JAVA7_HOME") + "/jre/lib/rt.jar")
    libraryjars files(System.getenv("JAVA7_HOME") + "/jre/lib/jce.jar")
    libraryjars files(configurations.compile)
    // Don't really try to do anything, we just want this tool for it's bytecode lint
    dontshrink
    dontobfuscate
    dontoptimize
    // Don't fail if LambdaMetafactory is missing - it would be handled by Retrolambda
    dontwarn 'java.lang.invoke.LambdaMetafactory'
    // Don't note that these are duplicately imported, different test tools pull in
    dontnote 'javax.annotation.**'
    dontnote 'net.jcip.annotations.**'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
